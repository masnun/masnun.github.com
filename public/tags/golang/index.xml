<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>masnun.rocks()</title>
    <link>http://masnun.rocks/tags/golang/index.xml</link>
    <description>Recent content on masnun.rocks()</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://masnun.rocks/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Golang: Building a Telegram bot for Aggregating Content</title>
      <link>http://masnun.rocks/2016/11/05/golang-building-a-telegram-bot-for-aggregating-content/</link>
      <pubDate>Sat, 05 Nov 2016 22:36:10 +0600</pubDate>
      
      <guid>http://masnun.rocks/2016/11/05/golang-building-a-telegram-bot-for-aggregating-content/</guid>
      <description>

&lt;p&gt;I was looking for some fun excercises to learn Go. At the same time, I also started to feel the need of an
automated program or simply put, a bot who can find contents from different sources and push them to a
messaging service where I can read them all in one place. I briefly considered Facebook Messenger but settled
for Telegram as the messaging service of choice. Telegram has apps for both phones and macs/pcs. They also
have an excellent set of well documented APIs.&lt;/p&gt;

&lt;p&gt;To begin with, I have already implemented pushing latest contents from my reddit front page to Telegram. The
work in progress code can be found here: &lt;a href=&#34;https://github.com/masnun/telegram-bot&#34;&gt;https://github.com/masnun/telegram-bot&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;the-idea&#34;&gt;The Idea&lt;/h3&gt;

&lt;p&gt;The program has these major parts now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQLite Database (Used with &lt;code&gt;Gorm&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Telegram API&lt;/li&gt;
&lt;li&gt;Reddit API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The program will be run periodically via cron job. On each execution, it will run a set of &lt;code&gt;tasks&lt;/code&gt; - one
task would be to fetch reddit content, another task would parse my rss feed, some other task would track
certain keywords on twitter - you get the idea! The main program is composed of these tasks and
they would be run one after one (or may be on separate goroutines in the future?). For now I have only one
task that fetches posts from my reddit front page.&lt;/p&gt;

&lt;p&gt;Since the app will have at best one user, SQLite should be fine for the use case. I chose &lt;code&gt;Gorm&lt;/code&gt; as the ORM.
In this blog post, I will quickly go through how these different parts work.&lt;/p&gt;

&lt;h3 id=&#34;using-sqlite-with-gorm&#34;&gt;Using SQLite with Gorm&lt;/h3&gt;

&lt;p&gt;If you have worked with Go for a while, you probably already know about &lt;code&gt;Gorm&lt;/code&gt; - it&amp;rsquo;s a really nice ORM for Go.
Installing &lt;code&gt;Gorm&lt;/code&gt; is simply -&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -u github.com/jinzhu/gorm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have Gorm installed, let&amp;rsquo;s first define our first model. To keep track of which posts the bot has already
pushed to Telegram, we will store the pushed posts in the database. For that, we will need one simple table where
we can store the permalink of a post.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the &lt;code&gt;RedditPost&lt;/code&gt; struct from &lt;code&gt;dao/entities.go&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;package dao

import (
	&amp;quot;github.com/jinzhu/gorm&amp;quot;
)

// RedditPost - Struct for storing Reddit Posts
// Used by `gorm`
type RedditPost struct {
	gorm.Model
	PermaLink string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see the &lt;code&gt;PermaLink&lt;/code&gt; field would contain the permalink for each post. Now we write a &lt;code&gt;Init&lt;/code&gt; function
which will setup the connection, run any necessary (auto) migrations and return a &lt;code&gt;DB&lt;/code&gt; handler so we can start
making queries. Here&amp;rsquo;s the code from &lt;code&gt;dao/gorm.go&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package dao

import (
	&amp;quot;github.com/jinzhu/gorm&amp;quot;
	_ &amp;quot;github.com/jinzhu/gorm/dialects/sqlite&amp;quot; // for db
)

// Init - Initialize database and return a  handler
func Init() *gorm.DB {
	db, err := gorm.Open(&amp;quot;sqlite3&amp;quot;, &amp;quot;telegram.db&amp;quot;)
	if err != nil {
		panic(&amp;quot;failed to connect database&amp;quot;)
	}

	db.AutoMigrate(&amp;amp;RedditPost{})

	return db
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we are using the &lt;code&gt;AutoMigrate&lt;/code&gt; function to automatically apply any changes to the &lt;code&gt;RedditPost&lt;/code&gt; model. On the
first run, the table will be created if it does not exist.&lt;/p&gt;

&lt;p&gt;Finally, we need to write the functions which will actually make database operations. For our current task,
we just need two functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One to check if the post exists already (pushed to telegram before)&lt;/li&gt;
&lt;li&gt;Store a new post&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have these functionality defined in &lt;code&gt;dao/utils.go&lt;/code&gt; -&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package dao

import (
	&amp;quot;fmt&amp;quot;
)

// Exists - check if an item exists in db
func Exists(PermaLink string) bool {
	db := Init()
	defer db.Close()
	var post RedditPost
	result := db.First(&amp;amp;post, &amp;quot;perma_link = ?&amp;quot;, PermaLink)
	if result.Error != nil {
		errorMsg := result.Error.Error()

		if errorMsg == &amp;quot;record not found&amp;quot; {
			return false
		}

		fmt.Println(errorMsg)

	}

	return true

}

// Create post
func Create(PermaLink string) {
	db := Init()
	defer db.Close()
	var post = RedditPost{PermaLink: PermaLink}
	result := db.Create(&amp;amp;post)
	if result.Error != nil {
		errorMsg := result.Error.Error()
		fmt.Println(errorMsg)

	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each time, we first get the connection to the database by calling &lt;code&gt;Init&lt;/code&gt; and then make &lt;code&gt;defer&lt;/code&gt;red call to &lt;code&gt;Close()&lt;/code&gt;
so the database connection is cleaned up when the function completes. Then we use the db connection to make queries.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;Exists&lt;/code&gt; function, I probably should have just used &lt;code&gt;Count&lt;/code&gt; functionality instead of the complex &lt;code&gt;First&lt;/code&gt;
call and error checking. But I was learning and wanted to try something unconventional. One thing to note here is
that the column name is &lt;code&gt;perma_link&lt;/code&gt; instead of the struct field being &lt;code&gt;PermaLink&lt;/code&gt;. This is Gorm convention to make
the column snake case version of the struct field. We can however define our column names quite easily.
For more details, please check their docs - &lt;a href=&#34;http://jinzhu.me/gorm/models.html&#34;&gt;http://jinzhu.me/gorm/models.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;Create&lt;/code&gt; function we use &lt;code&gt;db.Create&lt;/code&gt; to create the entry in database. That&amp;rsquo;s all!&lt;/p&gt;

&lt;h3 id=&#34;reading-our-reddit-frontpage&#34;&gt;Reading our Reddit Frontpage&lt;/h3&gt;

&lt;p&gt;I am using &lt;code&gt;github.com/jzelinskie/geddit&lt;/code&gt; to login to Reddit and grab the posts on the front page. Here&amp;rsquo;s the
code from &lt;code&gt;tasks/reddit.go&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package tasks

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;os&amp;quot;

	&amp;quot;github.com/jzelinskie/geddit&amp;quot;
	&amp;quot;github.com/masnun/telegram-bot/dao&amp;quot;
	&amp;quot;github.com/masnun/telegram-bot/utils&amp;quot;
)

func PushReddit() {
	session, err := geddit.NewLoginSession(
		os.Getenv(&amp;quot;REDDIT_USERNAME&amp;quot;),
		os.Getenv(&amp;quot;REDDIT_PASSWORD&amp;quot;),
		&amp;quot;gedditAgent v1&amp;quot;,
	)

	if err != nil {
		fmt.Println(&amp;quot;Reddit Login Error: &amp;quot;, err)
		return
	}

	subOpts := geddit.ListingOptions{
		Limit: 15,
	}

	submissions, _ := session.Frontpage(geddit.DefaultPopularity, subOpts)

	for _, s := range submissions {
		if exists := dao.Exists(s.Permalink); !exists {
			fmt.Printf(&amp;quot;Title: %s\nAuthor: %s\n\n&amp;quot;, s.Title, s.Permalink)
			dao.Create(s.Permalink)
			utils.SendTelegramMessage(fmt.Sprintf(&amp;quot;%s : https://www.reddit.com/%s&amp;quot;, s.Title, s.Permalink))
		} else {
			fmt.Println(&amp;quot;Exists: &amp;quot;, s.Permalink)
		}

	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we first login to Reddit. The credentials are stored using environment variables. I use a file named
&lt;code&gt;configure.sh&lt;/code&gt; to &lt;code&gt;export&lt;/code&gt; the variables. You can copy the existing
&lt;a href=&#34;https://github.com/masnun/telegram-bot/blob/master/configure.sh.sample&#34;&gt;&lt;code&gt;configure.sh.sample&lt;/code&gt;&lt;/a&gt;
file and store it as &lt;code&gt;configure.sh&lt;/code&gt;. Fill up the credentials and then do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;. ./configure.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should set the environment variables. Please make sure to complete this process before you run the program.&lt;/p&gt;

&lt;p&gt;After connecting to reddit, we fetch 15 posts, &lt;code&gt;range&lt;/code&gt; through them and if a new post is found, we post the title
and url to Telegram.&lt;/p&gt;

&lt;h3 id=&#34;posting-to-telegram&#34;&gt;Posting to Telegram&lt;/h3&gt;

&lt;p&gt;First create a bot by contacting the infamous &lt;code&gt;BotFather&lt;/code&gt; on Telegram. Once you have the Token, we&amp;rsquo;ll need one
more thing - your chat ID so the bot can directly send you the message.&lt;/p&gt;

&lt;p&gt;First, &lt;code&gt;go get&lt;/code&gt; the project we shall use to connect to Telegram:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get github.com/go-telegram-bot-api/telegram-bot-api
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then go ahead and run the sample codes available on:
&lt;a href=&#34;https://github.com/go-telegram-bot-api/telegram-bot-api&#34;&gt;https://github.com/go-telegram-bot-api/telegram-bot-api&lt;/a&gt; and you can get the chat id from &lt;code&gt;update.Message.Chat.ID&lt;/code&gt;.
After extracting the chat ID, store it in the &lt;code&gt;configure.sh&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Now, we write a very simple function to post to our user. Here&amp;rsquo;s the code from &lt;code&gt;utils/telegram.go&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
package utils

import (
	&amp;quot;os&amp;quot;
	&amp;quot;strconv&amp;quot;

	&amp;quot;fmt&amp;quot;

	&amp;quot;gopkg.in/telegram-bot-api.v4&amp;quot;
)

func SendTelegramMessage(message string) {

	bot, err := tgbotapi.NewBotAPI(os.Getenv(&amp;quot;TELEGRAM_KEY&amp;quot;))
	if err != nil {
		fmt.Println(err.Error())
	}

	if bot.Self.UserName == &amp;quot;&amp;quot; {
		fmt.Println(&amp;quot;Error connecting to Telegram!&amp;quot;)
		return
	}

	chatID, _ := strconv.ParseInt(os.Getenv(&amp;quot;TELEGRAM_OWNER_CHATID&amp;quot;), 10, 64)
	msg := tgbotapi.NewMessage(chatID, message)
	bot.Send(msg)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We connect to telegram using the token we received from BotFather. Then to make sure that the auth was successful,
we check the username of the bot. Then we construct a new message using the chat id and the message we get as
argument. We send it. The code is pretty simple and straightforward.&lt;/p&gt;

&lt;h3 id=&#34;building-and-running&#34;&gt;Building and Running&lt;/h3&gt;

&lt;p&gt;First make sure you have the correct details in &lt;code&gt;configure.sh&lt;/code&gt; file and you have the environment variables set. If
not, set them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;. ./configure.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we build and run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;
go build -o bot
./bot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything goes alright, you should see the latest reddit front page submissions are posted to your telegram :)&lt;/p&gt;

&lt;h5 id=&#34;slow-build&#34;&gt;Slow Build?&lt;/h5&gt;

&lt;p&gt;If you&amp;rsquo;re using vendoring like me and you notice the build is taking slow, it&amp;rsquo;s probably because of the sqlite
driver. These should fix that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ./vendor/github.com/mattn/go-sqlite3/
go install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s next?&lt;/h3&gt;

&lt;p&gt;I am yet to integrate other sources. Hacker News, RSS feeds, tweets and other stuff would be nice to add.
Later it would be a good idea to implement some sort of intelligent filtering / sorting of the contents
based on my interests/reading habits.&lt;/p&gt;

&lt;p&gt;I really hope to learn some Golang by building the stuff. If you notice some bad practices or scopes of
improvement, please feel free to suggest those in the comment section.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Distributed Task Processing in Go</title>
      <link>http://masnun.rocks/2016/11/01/distributed-task-processing-in-golang/</link>
      <pubDate>Tue, 01 Nov 2016 22:31:09 +0600</pubDate>
      
      <guid>http://masnun.rocks/2016/11/01/distributed-task-processing-in-golang/</guid>
      <description>

&lt;p&gt;I started playing with Go almost a year ago but never really managed to dive deeper or do anything serious with
it. Recently picked it up again, reading and trying out bits of code on and off. Also started this new blog with
Hugo (which is written in Go as well). As a language, Go is simple yet performant. I am definitely going to
build a few micro services with Go soon.&lt;/p&gt;

&lt;p&gt;Having said that, I was wondering what I could use to build a distributed task processing system. What I wanted is
something similar to Celery in the Python land. Luckily, I found
&lt;a href=&#34;https://github.com/RichardKnop/machinery&#34; target=&#34;_blank&#34;&gt;machinery&lt;/a&gt; which is inspired by Celery and
has nice APIs to achieve similar results. In this blog post, I am going to demonstrate a simple example.&lt;/p&gt;

&lt;p&gt;The source code is available here: &lt;a href=&#34;https://github.com/masnun/golang-distributed-task-processing&#34; target=&#34;_blank&#34;&gt;masnun/golang-distributed-task-processing&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;getting-started&#34;&gt;Getting started&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s what we&amp;rsquo;re going to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There will be at least one worker which will be running and waiting for tasks&lt;/li&gt;
&lt;li&gt;We will be sending task request from another process&lt;/li&gt;
&lt;li&gt;We will be using Redis as the message queue&lt;/li&gt;
&lt;li&gt;Ideally the setup would be distributed, that is the worker might run in a separate machine. But for this
example, I will run both the worker and the task sender on the same machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;get-the-dependencies&#34;&gt;Get the dependencies&lt;/h3&gt;

&lt;p&gt;We need to install &lt;code&gt;machinery&lt;/code&gt; first. I am using Glide for dependency management in this project. But
that is not compulsory. &lt;code&gt;go get&lt;/code&gt; should work fine. So first, let&amp;rsquo;s install machinery -&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get github.com/RichardKnop/machinery/v1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;writing-task-and-worker&#34;&gt;Writing Task and worker&lt;/h3&gt;

&lt;p&gt;Workers are processes which keep running, waiting for task requests. Tasks are functions which can be
requested and then the workers execute those functions and return the results.&lt;/p&gt;

&lt;p&gt;Say we have a task named &lt;code&gt;Say&lt;/code&gt;. From some other processes, we would request that the &lt;code&gt;Say&lt;/code&gt; task be executed.
The worker that will receive the request will find which function is registered as the &lt;code&gt;Say&lt;/code&gt; task and then
call the function with the received arguments. The result from the function is then stored and can be retrieved
by the other parties.&lt;/p&gt;

&lt;p&gt;So we first need to write a simple task. We will be writing a function named &lt;code&gt;Say&lt;/code&gt; which will accept a name and
say hello. So let&amp;rsquo;s create a directory named &lt;code&gt;worker&lt;/code&gt; and inside create a file named &lt;code&gt;hello.go&lt;/code&gt;. In the file,
let&amp;rsquo;s define this function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

// Say &amp;quot;Hello World&amp;quot;
func Say(name string) (string, error) {
	return &amp;quot;Hello &amp;quot; + name + &amp;quot;!&amp;quot;, nil
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Please note the function signature. The function must return &lt;code&gt;error&lt;/code&gt; as the second return value. Otherwise
the library will have issues.&lt;/p&gt;

&lt;p&gt;In our case, we will be building a single executable from the worker code. So the package is called main. Now
that we have a function, let&amp;rsquo;s write the worker. Create a file named &lt;code&gt;main.go&lt;/code&gt; and put the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	machinery &amp;quot;github.com/RichardKnop/machinery/v1&amp;quot;
	&amp;quot;github.com/RichardKnop/machinery/v1/config&amp;quot;
	&amp;quot;github.com/RichardKnop/machinery/v1/errors&amp;quot;
)

func main() {

	var cnf = config.Config{
		Broker:        &amp;quot;redis://127.0.0.1:6379&amp;quot;,
		ResultBackend: &amp;quot;redis://127.0.0.1:6379&amp;quot;,
	}

	server, err := machinery.NewServer(&amp;amp;cnf)
	if err != nil {
		errors.Fail(err, &amp;quot;Could not create server&amp;quot;)
	}

	server.RegisterTask(&amp;quot;Say&amp;quot;, Say)

	worker := server.NewWorker(&amp;quot;worker-1&amp;quot;)
	err = worker.Launch()
	if err != nil {
		errors.Fail(err, &amp;quot;Could not launch worker!&amp;quot;)
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code is quite simple. We create a config object by passing the &lt;code&gt;Broker&lt;/code&gt; and &lt;code&gt;ResultBackend&lt;/code&gt; values. We are
using Redis here and the redis server is running on our machine. Please make sure the redis server is up and
running on that address. Otherwise, change the address to point to a running redis instance.&lt;/p&gt;

&lt;p&gt;Then we construct a server out of the configuration and register the task with the &lt;code&gt;RegisterTask&lt;/code&gt; method. We
pass a name and the corresponding function to execute for that task. It becomes simpler if we use the function
as the task name. Once the task is registered, we need to create one or more worker processes. Here we create a
new worker instance by calling &lt;code&gt;NewWorker&lt;/code&gt; method on the server. We pass a worker name so we can identify it
later on (for example in the logs). We then &lt;code&gt;Launch&lt;/code&gt; the worker. The worker starts up and connects to our redis
server. It then subscribes to appropriate channels to start listenning to task requests.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all we need to do to create a task and worker.&lt;/p&gt;

&lt;h3 id=&#34;requesting-sending-tasks&#34;&gt;Requesting / Sending Tasks&lt;/h3&gt;

&lt;p&gt;Now from another process (say from a running web application), on a certain ocassion, we want to run a background
task. Here we will see how we can send task requests.&lt;/p&gt;

&lt;p&gt;In our root directory, let&amp;rsquo;s create another &lt;code&gt;main.go&lt;/code&gt; file and &lt;code&gt;main&lt;/code&gt; function to send the tasks.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	machinery &amp;quot;github.com/RichardKnop/machinery/v1&amp;quot;
	&amp;quot;github.com/RichardKnop/machinery/v1/config&amp;quot;
	&amp;quot;github.com/RichardKnop/machinery/v1/errors&amp;quot;
	&amp;quot;github.com/RichardKnop/machinery/v1/signatures&amp;quot;
)

func main() {

	var cnf = config.Config{
		Broker:        &amp;quot;redis://127.0.0.1:6379&amp;quot;,
		ResultBackend: &amp;quot;redis://127.0.0.1:6379&amp;quot;,
	}

	server, err := machinery.NewServer(&amp;amp;cnf)
	if err != nil {
		errors.Fail(err, &amp;quot;Can not create server!&amp;quot;)
	}

	sayTask := signatures.TaskSignature{
		Name: &amp;quot;Say&amp;quot;,
		Args: []signatures.TaskArg{
			signatures.TaskArg{
				Type:  &amp;quot;string&amp;quot;,
				Value: &amp;quot;masnun&amp;quot;,
			},
		},
	}

	server.SendTask(&amp;amp;sayTask)

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you look carefully, up to the server creation, the code is same. We define a config and create a server. Then we
define a task signature. We need to define task signatures to request task executions. In the task signature,
we need to pass the &lt;code&gt;Name&lt;/code&gt; of the task and a list of arguments as &lt;code&gt;Args&lt;/code&gt;. The args will be of &lt;code&gt;TaskArg&lt;/code&gt; type. Each
&lt;code&gt;TaskArg&lt;/code&gt; need to set the &lt;code&gt;Type&lt;/code&gt; and the &lt;code&gt;Value&lt;/code&gt;. These arguments will be passed along to our function when the worker
receives this request.&lt;/p&gt;

&lt;p&gt;To queue a task, we use the &lt;code&gt;SendTask&lt;/code&gt; method and pass a pointer to our &lt;code&gt;TaskSignature&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;tying-it-out&#34;&gt;Tying it out!&lt;/h3&gt;

&lt;p&gt;Make sure the redis server is running. In case it is not, run it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;redis-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once redis is running, build and run the worker.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd worker
go build
./worker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the worker starts up, you should see some messages like these:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;machinery: worker.go:27: Launching a worker with the following settings:
machinery: worker.go:28: - Broker: redis://127.0.0.1:6379
machinery: worker.go:29: - ResultBackend: redis://127.0.0.1:6379
machinery: worker.go:30: - Exchange:
machinery: worker.go:31: - ExchangeType:
machinery: worker.go:32: - DefaultQueue:
machinery: worker.go:33: - BindingKey:
machinery: redis.go:86: [*] Waiting for messages. To exit press CTRL+C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to build the program that will send tasks to the queue. Open a new terminal window and
navigate to the project root. Build the main program and run it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go build -o main
./main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That should queue the task. Now switch to the worker process and check the output. If everything goes right,
we will see some output like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;machinery: redis.go:211: Received new message: {&amp;quot;UUID&amp;quot;:&amp;quot;task_c39f7e99-df4d-443a-ad21-3481260b34fb&amp;quot;,&amp;quot;Name&amp;quot;:&amp;quot;Say&amp;quot;,&amp;quot;RoutingKey&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;GroupUUID&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;GroupTaskCount&amp;quot;:0,&amp;quot;Args&amp;quot;:[{&amp;quot;Type&amp;quot;:&amp;quot;string&amp;quot;,&amp;quot;Value&amp;quot;:&amp;quot;masnun&amp;quot;}],&amp;quot;Headers&amp;quot;:null,&amp;quot;Immutable&amp;quot;:false,&amp;quot;OnSuccess&amp;quot;:null,&amp;quot;OnError&amp;quot;:null,&amp;quot;ChordCallback&amp;quot;:null}
machinery: worker.go:110: Processed task_c39f7e99-df4d-443a-ad21-3481260b34fb. Result = Hello masnun!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we are using a &lt;code&gt;ResultBackend&lt;/code&gt; too, we can check the state and retrieve the task results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
asyncResult, err := server.SendTask(&amp;amp;sayTask)

taskState := asyncResult.GetState()
fmt.Printf(&amp;quot;Current state of %v task is:\n&amp;quot;, taskState.TaskUUID)
fmt.Println(taskState.State)

result, err := asyncResult.Get()
fmt.Println(result.Interface())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(My example code on Github does not include this part, it would be a good self practice to try these out ourselves,
no?)&lt;/p&gt;

&lt;p&gt;The machinery library has some other cool features too. Do checkout the github repo for in depth documentation
and code samples.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>